import json
import multiprocessing
from http.server import HTTPServer, BaseHTTPRequestHandler
import assetinfo
import boot
import process
import portscan
import soft
import performance
from multiprocessing import Process, Pool
import threading


class Resquest(BaseHTTPRequestHandler):
    def handler(self):
        print("data:", self.rfile.readline().decode())
        self.wfile.write(self.rfile.readline())

    def do_GET(self):
        print(self.requestline)
        if self.path == '/asset_detail':
            data = json.dumps(assetinfo.get_info(), ensure_ascii=False)
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(data).encode())
            return
        elif self.path == '/asset_opt/0':
            assetinfo.shutdown()
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            return
        elif self.path == '/asset_opt/2':
            assetinfo.restart()
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            return
        elif self.path == '/asset_process':
            data = json.dumps(process.get_process(), ensure_ascii=False)
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(data).encode())
            return
        elif self.path == '/asset_soft':
            data = json.dumps(soft.GetSoftInfo(), ensure_ascii=False)
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(data).encode())
            return
        elif self.path == '/asset_boot':
            data = json.dumps(boot.GetBoot(), ensure_ascii=False)
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(data).encode())
            return
        elif self.path == '/asset_ports_scan':
            data = json.dumps(portscan.get_port_status(), ensure_ascii=False)
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(data).encode())
            return
        elif self.path == '/cpu_percent':
            print('获取资源占用率')
            data = json.dumps(performance.GetCpuPercent(), ensure_ascii=False)
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(data).encode())
            return

    def do_POST(self):
        print(self.headers)
        print(self.command)
        req_datas = self.rfile.read(int(self.headers['content-length']))  # 重点在此步!
        print(req_datas.decode())
        data = {
            'result_code': '2',
            'result_desc': 'Success',
            'timestamp': '',
            'data': {'message_id': '25d55ad283aa400af464c76d713c07ad'}
        }
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(data).encode('utf-8'))


if __name__ == '__main__':
    def webserver():
        host = ('', 8000)
        server = HTTPServer(host, Resquest)
        print("Starting server, listen at: %s:%s" % host)
        server.serve_forever()
    webserver()
    # t1 = threading.Thread(target=webserver)
    # t2 = threading.Thread(target=performance.CpuPercent)
    # t1.setDaemon(True)
    # t1.start()
    # t2.start()