# coding:utf-8
from django.shortcuts import render
from django.core import serializers
from django.views.generic import View
from http.client import *
from rest_framework.views import APIView
from rest_framework.response import Response
from scapy.layers.l2 import Ether, ARP
import json
from scapy.all import *
from asset.models import host
from asset.models import static
import netifaces


class IndexViews(View):
    """
    返回主页
    """
    def get(self, request, *args, **kwagrs):
        return render(request, 'base.html')


class AssetList(APIView):
    """
    获取全部网卡的IP NetMask
    """
    def get(self, request, *args, **kwargs):
        #  执行get请求
        data = host.objects.all()
        #  获取数据库中的主机数据
        data.update(status=0)
        #  重置状态码
        data.update(ip="0.0.0.0")
        #  重置IP
        return render(request, 'asset/asset_list.html')

    def post(self, request, *args, **kwargs):

        net_list = netifaces.interfaces()
        #  获取当前机器所有网络接口
        net_mask = []
        for net in net_list:
            try:
                ip = netifaces.ifaddresses(net)[2][0]['addr']
                #  获取IP地址
                nmk = [bin(int(i))[2:] for i in netifaces.ifaddresses(net)[2][0]['netmask'].split('.')]
                #  获取子网掩码
                count = 0
                for i in nmk:
                    for j in i:
                        if j == '1':
                            count += 1
                net_mask.append(ip + "/" + str(count))
                #  将子网掩码转换成为十进制数
            except:
                continue
        return Response(json.dumps(net_mask))


class AssetStatus(APIView):
    """
    获取在线主机列表，返回序列化的dataList
    """
    def get(self, request, *args, **kwargs):
        net = request.GET.get('net')
        #  从request中取出要搜索的网段
        ans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=net), timeout=3)
        #  通过scapy第三方库使用ARP协议搜索网络中的主机并返回一个在线主机的列表
        for i in ans[0]:
            ip = i.answer[ARP].psrc
            #  取出在线主机的IP
            get_mac = i.answer[ARP].hwsrc.replace(':', '-').upper()
            #  取出在线主机的MAC并转换成大写状态
            print("mac:",get_mac)
            try:
                data = host.objects.get(mac=get_mac)
                data.ip = ip
                data.status = 1
                data.save()
                #  将在线主机的IP 和状态保存到数据库中
            except Exception as e:
                print('获取主机列表错误',e)
                continue
        assets = host.objects.all()
        #  获取数据库中所有主机的信息
        dataList = serializers.serialize('json', assets)
        #  序列化数据
        return Response(dataList)
        #  返回给请求方这里的Response是rest_framework.response框架中的Response

class AssetDetail(View):
    """
    获取主机详情
    """
    def get(self, request, *args, **kwargs):
        if request.GET.get('ip', None) is not None:
            ip = request.GET.get('ip')
            request.session['ip'] = ip
            #   此页为主机详情首页，将IP存session为其他页面获取IP提供便利
        try:
            ip = request.session['ip']
            conn = HTTPConnection(host=ip, port=8000)
            #  HTTP链接到对应IP的主机上，通信端口为8000
            conn.request(method='GET', url='/asset_detail')
            #  设置request数据包的method url，不懂去学HTTP协议
            resp = conn.getresponse()
            #  接收客户端的相应报文
            data1 = resp.read()
            data = eval(json.loads(data1))
            print(data)
            dic = {
                'ip': ip,
                'data': data,
            }
            dbDetail = static(mac=data['net']['mac'],ip=ip,
                              hostname=data['host_info']['主机名'],
                                user=data['host_info']['使用者'],
                              os= data['host_info']['操作系统'],
                              bit=data['host_info']['位数'],
                              cpu=data['host_info']['处理器'],
                              mainBoard=data['host_info']['主板名称'],
                              memory=data['host_info']['内存'],
                              disk=data['host_info']['磁盘名称'],
                              graphics=data['host_info']['显卡名称'],
                              )
            dbDetail.save()
            print(type(dbDetail))
            return render(request, 'asset/asset_detail.html', dic)
        except Exception as e:
            print("获取资产详情失败，原因：", e)
            return render(request, '404.html')


class AssetPortScan(APIView):
    """
    端口扫描
    此阶段代码与AssetDetail(View)大同小异故此不再赘述
    """
    def get(self, request, *args, **kwargs):
        ip = request.session['ip']
        try:
            conn = HTTPConnection(host=ip, port=8000)
            conn.request(method='GET', url='/asset_ports_scan')
            resp = conn.getresponse()
            data1 = resp.read()
            data = json.loads(data1)
            return Response(data)
        except Exception as e:
            print("端口扫描失败，原因：", e)
            return Response(status=404)


class AssetProcess(APIView):
    """
    获取进程
    此阶段代码与AssetDetail(View)大同小异故此不再赘述
    """
    def get(self, request, *args, **kwargs):
        ip = request.session['ip']
        try:
            conn = HTTPConnection(host=ip, port=8000)
            conn.request(method='GET', url='/asset_process')
            resp = conn.getresponse()
            data1 = resp.read()
            data = json.loads(data1)
            return Response(data)
        except Exception as e:
            print("获取资产详情失败，原因：", e)
            return Response(status=404)


class AssetOpt(View):
    """
    关机重启操作
    此阶段代码与AssetDetail(View)大同小异故此不再赘述
    """
    def get(self, request, *args, **kwargs):
        ip = request.GET.get('ip')
        opt = request.GET.get('opt')
        conn = HTTPConnection(host=ip, port=8000)
        if opt == 0:
            conn.request(method='GET', url='/asset_opt/0')
            resp = conn.getresponse()
            return render(request, 'asset/asset_detail.html')
        elif opt == 1:
            conn.request(method='GET', url='/asset_opt/1')
            resp = conn.getresponse()
            return render(request, 'asset/asset_detail.html')
        else:
            conn.request(method='GET', url='/asset_opt/2')
            resp = conn.getresponse()
            return render(request, 'asset/asset_detail.html')


class AssetSoft(APIView):
    """
    获取软件信息
    此阶段代码与AssetDetail(View)大同小异故此不再赘述
    """
    def get(self, request, *args, **kwargs):
        if request.session['ip'] is None:
            return render(request, '404.html')
        ip = request.session['ip']
        try:
            conn = HTTPConnection(host=ip, port=8000)
            conn.request(method='GET', url='/asset_soft')
            resp = conn.getresponse()
            data1 = resp.read()
            data = json.loads(data1)
            return Response(data)
        except Exception as e:
            print("获取启动项失败，原因：", e)
            return Response(status=404)


class AssetPerformance(APIView):
    """
    此阶段代码与AssetDetail(View)大同小异故此不再赘述
    """
    def get(self, request, *args, **kwargs):
        # print(request.session)
        if request.session['ip'] is None:
            return render(request, '404.html')
        ip = request.session['ip']
        print("ip",ip)
        try:
            print("cpu_percent")
            conn = HTTPConnection(host=ip, port=8000)
            conn.request(method='GET', url='/cpu_percent')
            resp = conn.getresponse()
            data1 = resp.read()
            print("data1,",data1)
            data = json.loads(data1)
            return Response(data)

        except Exception as e:
            print("获取启动项失败，原因：", e)
            return Response(status=404)


class AssetBoot(APIView):
    """
    获取被控制主机的开机启动项
    此阶段代码与AssetDetail(View)大同小异故此不再赘述
    """
    def get(self, request, *args, **kwargs):
        if request.session['ip'] is None:
            return render(request, '404.html')
        ip = request.session['ip']
        try:
            conn = HTTPConnection(host=ip, port=8000)
            conn.request(method='GET', url='/asset_boot')
            resp = conn.getresponse()
            data1 = resp.read()
            data = json.loads(data1)
            return Response(data)
        except Exception as e:
            print("获取启动项失败，原因：", e)
            return Response(status=404)


class AssetAdd(View):
    """
    获取到与host的链接参数
    """
    def post(self, request, *args, **kwagrs):
        try:
            assetnum = request.POST['assetnum']
            hostname = request.POST['hostname']
            macadd = request.POST['macadd']
            host.objects.create(assetnum, hostname, macadd)
        except Exception as e:
            pass
        return True

# 这里可以返回一个新资产加入的消息


class AssetUpdate(View):
    pass


class AssetDelete(View):
    pass
